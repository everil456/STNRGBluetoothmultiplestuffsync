###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        18/Mar/2015  14:56:26
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server 2\src\gatt_db.c
#    Command line =  
#        "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server 2\src\gatt_db.c" -D USE_STDPERIPH_DRIVER -D
#        STM32L1XX_MD -D SYSCLK_FREQ_HSI_32MHz -D ENABLE_USB -D
#        ENABLE_USB_PRINTF -D SERVER=1 -lcN "C:\School\2014 Fall\ECE
#        4900\Bluetooth Code\SVN\trunk\Projects V2\Project\BLE_Chat_Server
#        2\EWARM\Server\List\" --diag_suppress Pa050 -o "C:\School\2014
#        Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server 2\EWARM\Server\Obj\" --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I "C:\School\2014 Fall\ECE
#        4900\Bluetooth Code\SVN\trunk\Projects V2\Project\BLE_Chat_Server
#        2\EWARM\..\inc\" -I "C:\School\2014 Fall\ECE 4900\Bluetooth
#        Code\SVN\trunk\Projects V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\Bluetooth LE\SimpleBlueNRG_HCI\" -I "C:\School\2014
#        Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server 2\EWARM\..\..\..\Bluetooth
#        LE\SimpleBlueNRG_HCI\includes\" -I "C:\School\2014 Fall\ECE
#        4900\Bluetooth Code\SVN\trunk\Projects V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\platform\STM32L1XX\" -I "C:\School\2014 Fall\ECE
#        4900\Bluetooth Code\SVN\trunk\Projects V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\platform\STM32L1XX\Libraries\" -I "C:\School\2014
#        Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\platform\STM32L1XX\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\"
#        -I "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32_USB-FS-Device_Driver\inc\"
#        -I "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32L1xx_StdPeriph_Driver\inc\"
#        -I "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\platform\STM32L1XX\Libraries\I2C\inc\" -I
#        "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\platform\STM32L1XX\Libraries\LIS3DH\inc\" -I
#        "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\platform\STM32L1XX\Libraries\STLM75\inc\" -I
#        "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\platform\STM32L1XX\Libraries\HTS221\inc\" -I
#        "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\platform\STM32L1XX\Libraries\LPS25H\inc\" -I
#        "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\platform\STM32L1XX\Libraries\SDK_Eval_STM32L\inc\"
#        -Ohs --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server 2\EWARM\Server\List\gatt_db.lst
#    Object file  =  
#        C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server 2\EWARM\Server\Obj\gatt_db.o
#
###############################################################################

C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects V2\Project\BLE_Chat_Server 2\src\gatt_db.c
      1          #include "hal_types.h"
      2          #include "gatt_server.h"
      3          #include "gap.h"
      4          #include "string.h"
      5          #include "bluenrg_aci.h"
      6          #include "bluenrg_aci_const.h"
      7          #include "app_state.h"
      8          #include <stdio.h>
      9          #include <stdlib.h>
     10          #include "syncr.h"
     11          
     12          extern uint32_t offset=0;
     13          
     14          #ifndef DEBUG
     15          #define DEBUG 1
     16          #endif
     17          
     18          #if DEBUG
     19          #include <stdio.h>
     20          #define PRINTF(...) printf(__VA_ARGS__)
     21          #else
     22          #define PRINTF(...)
     23          #endif
     24          
     25          
     26          #define COPY_UUID_128(uuid_struct, uuid_15, uuid_14, uuid_13, uuid_12, uuid_11, uuid_10, uuid_9, uuid_8, uuid_7, uuid_6, uuid_5, uuid_4, uuid_3, uuid_2, uuid_1, uuid_0) \
     27            do {\
     28            	uuid_struct.uuid128[0] = uuid_0; uuid_struct.uuid128[1] = uuid_1; uuid_struct.uuid128[2] = uuid_2; uuid_struct.uuid128[3] = uuid_3; \
     29          	uuid_struct.uuid128[4] = uuid_4; uuid_struct.uuid128[5] = uuid_5; uuid_struct.uuid128[6] = uuid_6; uuid_struct.uuid128[7] = uuid_7; \
     30          	uuid_struct.uuid128[8] = uuid_8; uuid_struct.uuid128[9] = uuid_9; uuid_struct.uuid128[10] = uuid_10; uuid_struct.uuid128[11] = uuid_11; \
     31          	uuid_struct.uuid128[12] = uuid_12; uuid_struct.uuid128[13] = uuid_13; uuid_struct.uuid128[14] = uuid_14; uuid_struct.uuid128[15] = uuid_15; \
     32          	}while(0)
     33          
     34          uint16_t chatServHandle, TXCharHandle, RXCharHandle;
     35          /*  User Function where serial received data should be processed */
     36          void processInputData(uint8_t * rx_data, uint16_t data_size);
     37          
     38          /*******************************************************************************
     39          * Function Name  : Add_Chat_Service
     40          * Description    : Add the 'Accelerometer' service.
     41          * Input          : None
     42          * Return         : Status.
     43          *******************************************************************************/
     44          tBleStatus Add_Chat_Service(void)
     45          {
     46            	tBleStatus ret;
     47              
     48              /*
     49              UUIDs:
     50              D973F2E0-B19E-11E2-9E96-0800200C9A66
     51              D973F2E1-B19E-11E2-9E96-0800200C9A66
     52              D973F2E2-B19E-11E2-9E96-0800200C9A66
     53              */
     54              
     55              const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
     56              const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
     57              const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
     58              
     59              ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &chatServHandle); /* original is 9?? */
     60              if (ret != BLE_STATUS_SUCCESS) goto fail;    
     61                  
     62              ret =  aci_gatt_add_char(chatServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
     63                                16, 1, &TXCharHandle);
     64              if (ret != BLE_STATUS_SUCCESS) goto fail;
     65              
     66              ret =  aci_gatt_add_char(chatServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
     67                                16, 1, &RXCharHandle);
     68              if (ret != BLE_STATUS_SUCCESS) goto fail;
     69              
     70          	PRINTF("Chat Service added.\r\nTX Char Handle %04X, RX Char Handle %04X\r\n", TXCharHandle, RXCharHandle);
     71          	return BLE_STATUS_SUCCESS; 
     72          	
     73          fail:
     74            	PRINTF("Error while adding Chat service.\n");
     75          	return BLE_STATUS_ERROR ;
     76          }
     77          
     78          
     79          void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
     80          {
     81            tClockTime ct;
     82            ct = Clock_Time();
     83            printf("got_time: ");
     84            printf("%lu\n\r",ct);
     85              if(handle == RXCharHandle + 1){
     86                uint32_t got_time = (uint32_t) ct;
     87                
     88                printf("recieved: ");
     89                  for(int i = 0; i < data_length; i++)
     90                    printf("%c", att_data[i]);
     91                  printf("\r\n");
     92                  if(att_data[0] == '1'){
     93                    printf("at index 0 received a 0\n\r");
     94                    if(att_data[1] == 'O'){
     95                      printf("at index 1 received an O\n\r");
     96                      char number[4];
     97                      int p = 0;
     98                      for(int q = 2; q < 6; q++){
     99                        number[p] = att_data[q];
    100                        
    101                        p++;
    102                      }
    103                      printf("number is: %c%c%c%c\n\r",number[0],number[1],number[2],number[3]);
    104                      int size = sizeof(number)/sizeof(number[0]);	
    105                      int q;
    106                      uint32_t time = 0;
    107                      for(q = 0; q < size; q++){
    108                              uint32_t j = number[q];
    109                              int shift = ((size - q)-1)*8;
    110                              uint32_t k = j<<shift;
    111                              time += k;
    112                      }           
    113                      printf("time: %lu\n\r",time);
    114                      //need to store offset somewhere. Rex where do you want it?
    115                      offset = time;
    116                    }
    117                    else if(att_data[1] == 'T'){
    118                      printf("at index 1 received a T\n\r");           
    119                      uint32_t hhtime = got_time;
    120                      printf("hhtime: ");
    121                      printf("%lu\n\r", hhtime);
    122                      char message_t[8];
    123                      char number[4];
    124                      message_t[0] = 'H';
    125                      message_t[1] = 'T';
    126                      
    127                      //sprintf(number, "%lu", hhtime);
    128                      
    129                      int size = sizeof(number)/sizeof(number[0]);
    130                      uint32_t two = 0xFF;
    131                      int i;
    132                      for(i = 0; i < size; i ++){
    133                          int shift = ((size - i)-1)*8;
    134                          uint32_t and = two<<shift;
    135          		printf("and: %lu\r\n",and);
    136          		uint32_t cut = hhtime & and;
    137          		printf("cut: %lu\r\n",cut);
    138          		cut = cut>>shift;
    139          		printf("cut: %lu\r\n",cut);
    140          		number[i] = (char)cut;
    141          		printf("array at %d is %c\r\n",i,number[i]);
    142                      }
    143                      printf("size: %d\n\r",size);
    144                      
    145                      int p = 0;
    146                      for(int q = 2; q < 6; q++){
    147                        message_t[q] = number[p];
    148                        printf("P: %d\n\r number: %c\n\r",p,number[p]);
    149                        p++;
    150                      }
    151                      message_t[6] = '\n';
    152                      message_t[7] = '\0';
    153                      Clock_Wait(500);
    154                      printf(message_t);
    155                      processInputData(message_t, 8);  
    156                    
    157                    }
    158                    else if(att_data[1] == 'E'){
    159                      printf("at index 1 received an E\n\r");
    160                      char number[4];
    161                      int p = 0;
    162                      for(int q = 2; q < 6; q++){
    163                        number[p] = att_data[q];
    164                        p++;
    165                      }
    166                      int size = sizeof(number)/sizeof(number[0]);	
    167                      int q;
    168                      uint32_t time = 0;
    169                      for(q = 0; q < size; q++){
    170                              uint32_t j = number[q];
    171                              int shift = ((size - q)-1)*8;
    172                              uint32_t k = j<<shift;
    173                              time += k;
    174                      }     
    175                      //trigger event at time
    176                      startTimer(2);
    177                      printf("Event at time: ");
    178                      printf("%lu\n\r", time);
    179                    }
    180                    
    181                  }
    182                    
    183              }
    184                else if(handle == TXCharHandle + 2){        
    185                  if(att_data[0] == 0x01)
    186                      APP_FLAG_SET(NOTIFICATIONS_ENABLED);
    187              }
    188          }
    189          
    190          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      88   Add_Chat_Service
        88   -> aci_gatt_add_char
        88   -> aci_gatt_add_serv
        88   -> printf
      48   Attribute_Modified_CB
        48   -> Clock_Time
        48   -> Clock_Wait
        48   -> printf
        48   -> processInputData
        48   -> startTimer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable24
       4  ??DataTable24_1
       4  ??DataTable24_2
       4  ??DataTable24_3
      16  ?_0
      16  ?_1
      28  ?_10
      28  ?_11
      24  ?_12
      12  ?_13
      28  ?_14
      12  ?_15
      12  ?_16
      12  ?_17
      20  ?_18
      12  ?_19
      16  ?_2
      24  ?_20
      28  ?_21
      16  ?_22
      64  ?_3
      36  ?_4
      12  ?_5
       8  ?_6
      12  ?_7
       4  ?_8
       4  ?_9
     158  Add_Chat_Service
     594  Attribute_Modified_CB
      12  chatServHandle
          TXCharHandle
          RXCharHandle
          offset

 
    12 bytes in section .bss
     8 bytes in section .rodata
 1 204 bytes in section .text
 
 1 204 bytes of CODE  memory
     8 bytes of CONST memory
    12 bytes of DATA  memory

Errors: none
Warnings: 2
