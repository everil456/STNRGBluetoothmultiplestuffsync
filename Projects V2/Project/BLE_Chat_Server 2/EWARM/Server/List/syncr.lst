###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        18/Mar/2015  14:47:18
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server 2\src\syncr.c
#    Command line =  
#        "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server 2\src\syncr.c" -D USE_STDPERIPH_DRIVER -D
#        STM32L1XX_MD -D SYSCLK_FREQ_HSI_32MHz -D ENABLE_USB -D
#        ENABLE_USB_PRINTF -D SERVER=1 -lcN "C:\School\2014 Fall\ECE
#        4900\Bluetooth Code\SVN\trunk\Projects V2\Project\BLE_Chat_Server
#        2\EWARM\Server\List\" --diag_suppress Pa050 -o "C:\School\2014
#        Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server 2\EWARM\Server\Obj\" --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I "C:\School\2014 Fall\ECE
#        4900\Bluetooth Code\SVN\trunk\Projects V2\Project\BLE_Chat_Server
#        2\EWARM\..\inc\" -I "C:\School\2014 Fall\ECE 4900\Bluetooth
#        Code\SVN\trunk\Projects V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\Bluetooth LE\SimpleBlueNRG_HCI\" -I "C:\School\2014
#        Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server 2\EWARM\..\..\..\Bluetooth
#        LE\SimpleBlueNRG_HCI\includes\" -I "C:\School\2014 Fall\ECE
#        4900\Bluetooth Code\SVN\trunk\Projects V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\platform\STM32L1XX\" -I "C:\School\2014 Fall\ECE
#        4900\Bluetooth Code\SVN\trunk\Projects V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\platform\STM32L1XX\Libraries\" -I "C:\School\2014
#        Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\platform\STM32L1XX\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\"
#        -I "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32_USB-FS-Device_Driver\inc\"
#        -I "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32L1xx_StdPeriph_Driver\inc\"
#        -I "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\platform\STM32L1XX\Libraries\I2C\inc\" -I
#        "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\platform\STM32L1XX\Libraries\LIS3DH\inc\" -I
#        "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\platform\STM32L1XX\Libraries\STLM75\inc\" -I
#        "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\platform\STM32L1XX\Libraries\HTS221\inc\" -I
#        "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\platform\STM32L1XX\Libraries\LPS25H\inc\" -I
#        "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server
#        2\EWARM\..\..\..\platform\STM32L1XX\Libraries\SDK_Eval_STM32L\inc\"
#        -Ohs --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server 2\EWARM\Server\List\syncr.lst
#    Object file  =  
#        C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server 2\EWARM\Server\Obj\syncr.o
#
###############################################################################

C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects V2\Project\BLE_Chat_Server 2\src\syncr.c
      1          #include "syncr.h"
      2          #include <stdio.h>
      3          #include <stm32l1xx_systick.h>
      4          #include <stm32l1xx_type.h>
      5          #include <stdlib.h>
      6          
      7          /*vocabulary
      8          bs = base station
      9          hh = hand held device
     10          ss = sync server, this will be the master bluetooth device
     11          p for permanent, or pervaisive
     12          i for instantaneous, momentary, discrete, etc
     13          bstimei = base station time, instantaneous, discrete, value to be sent to ss
     14          hhtimei = "    "       "       "       "       "       "       "       "
     15          bstimep = clock value on base station, accessed with getTime() function
     16          hhtimep = clocktime on the handheld device
     17          offseti = momentary offset between bstimei and hhtimei. 
     18          offsetp = the assumed real offset between the bstimep and the hhtimep
     19          */
     20          //*** we need to initialize offsetp to 0 somewhere that happens only once on startup or reset.
     21          
     22          //for bs, comment out in hh ss code
     23          
     24          //***on event, do this
     25          
     26          
     27          
     28          uint32_t s2i(char array[]){
     29            
     30            return atoi(array);
     31            
     32          }
     33          
     34          uint32_t f_bstimei()
     35          {
     36            return get_time();
     37            //***send bstimei to ss
     38            //message to ss that has bstimei count and variable name
     39          }
     40          
     41          //set bstimep and hhtimep on bs
     42          /*
     43          {
     44            bstimep = get_time();
     45            hhtimep = bstimep + offsetp;
     46          }*/
     47          
     48          //for hh, comment out in bs ss code
     49          //***on event, do this
     50          uint32_t f_hhtimei()
     51          {
     52            return get_time();
     53            //***send hhtimei to ss
     54            //message to ss that has hhtimei count and variable name
     55          }
     56          
     57          //for ss, comment out in bs hh code
     58          
     59          uint32_t  calculate(uint32_t bstimei, uint32_t hhtimei, uint32_t offsetp)
     60          {
     61            /*on receiving bstimei or hhtimei compare bstimei + offset with hhtimei, if
     62            close to sync interval,uint32_t do nothing, if close to clock overflow, try bstimei + offset - clock overflow
     63            and if that is close, then do the calculation and update offsetp*/
     64            
     65          uint32_t offseti = bstimei - hhtimei; 
     66          offsetp = update_offsetp(offsetp,offseti);//this function prints, so if you dont like it, comment out the printing inside the function
     67          
     68          /*offsetp for offset permanent, 
     69          or offfset pervaisive, offseti for offset instantaneous, or offset momentary */
     70            //***send offsetp to bs
     71          return offsetp;
     72          }
     73          
     74          // functions
     75          uint32_t get_time()
     76          {
     77            u32 timei = SysTick_GetCounter(); // timei for instantaneous time
     78            uint32_t ret = (uint32_t)timei;    
     79            return(ret);
     80          }
     81          
     82          uint32_t update_offsetp(uint32_t offsetp, uint32_t offseti)
     83          {
     84            //variables
     85          uint32_t n = 10; //number to divide offset error by before adding it to offfsetp
     86          uint32_t tolerance = 200; // 800 at 8 MHz = 100 us, tolerance to call a value good
     87          uint32_t n2 = 4; //number to divide offset error by before adding it to offfsetp
     88          uint32_t tolerance2 = 24000000; // 3 seconds, we need to reset offsetp
     89          // if offseti is very close to offsetp
     90          if (((offseti - offsetp) < tolerance)&&((offseti - offsetp) > - tolerance)) 
     91          {
     92            offsetp = offsetp + (offseti - offsetp)/n; 
     93            printf("offsetp: %10d\n\r",offsetp);
     94            return offsetp;
     95          }
     96          // if offseti is semi close to offsetp
     97          else if (((offseti - offsetp) < tolerance2)&&((offseti - offsetp) > - tolerance2)) 
     98          {
     99            offsetp = offsetp + (offseti - offsetp)/n2; 
    100            return offsetp;
    101          }
    102          //offsetp needs to be initialized
    103          else if (offsetp == 0) 
    104          {
    105            uint32_t offsetp = offseti; 
    106            return offsetp;
    107          }
    108          // Error
    109          else
    110          {
    111            printf("Error: offseti not within %10d clock ticks of offsetp.\n\r  offseti: %10d\n\r",tolerance2,offseti);
    112            return offsetp;
    113          }
    114          }
    115            

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   calculate
       0   f_bstimei
         0   -> SysTick_GetCounter
       0   f_hhtimei
         0   -> SysTick_GetCounter
       0   get_time
         0   -> SysTick_GetCounter
       0   s2i
         0   -> __iar_Stoul
       8   update_offsetp
         8   -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
      16  ?_0
      76  ?_1
      26  calculate
       4  f_bstimei
       4  f_hhtimei
       4  get_time
       8  s2i
      24  update_offsetp

 
  16 bytes in section .rodata
 150 bytes in section .text
 
 150 bytes of CODE  memory
  16 bytes of CONST memory

Errors: none
Warnings: none
