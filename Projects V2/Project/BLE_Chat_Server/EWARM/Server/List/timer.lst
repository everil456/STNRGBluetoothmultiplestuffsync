###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        18/Mar/2015  10:36:19
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Ryan\Documents\school\uou\Cadwell\Phase 3\trunk\Projects
#        V2\Project\BLE_Chat_Server\src\timer.c
#    Command line =  
#        "C:\Users\Ryan\Documents\school\uou\Cadwell\Phase 3\trunk\Projects
#        V2\Project\BLE_Chat_Server\src\timer.c" -D USE_STDPERIPH_DRIVER -D
#        STM32L1XX_MD -D SYSCLK_FREQ_HSI_32MHz -D ENABLE_USB -D
#        ENABLE_USB_PRINTF -D SERVER=1 -lcN
#        "C:\Users\Ryan\Documents\school\uou\Cadwell\Phase 3\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\Server\List\" --diag_suppress Pa050
#        -o "C:\Users\Ryan\Documents\school\uou\Cadwell\Phase 3\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\Server\Obj\" --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\Ryan\Documents\school\uou\Cadwell\Phase 3\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\inc\" -I
#        "C:\Users\Ryan\Documents\school\uou\Cadwell\Phase 3\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\Bluetooth
#        LE\SimpleBlueNRG_HCI\" -I
#        "C:\Users\Ryan\Documents\school\uou\Cadwell\Phase 3\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\Bluetooth
#        LE\SimpleBlueNRG_HCI\includes\" -I
#        "C:\Users\Ryan\Documents\school\uou\Cadwell\Phase 3\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\platform\STM32L1XX\" -I
#        "C:\Users\Ryan\Documents\school\uou\Cadwell\Phase 3\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\platform\STM32L1XX\Libraries\"
#        -I "C:\Users\Ryan\Documents\school\uou\Cadwell\Phase 3\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\platform\STM32L1XX\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\"
#        -I "C:\Users\Ryan\Documents\school\uou\Cadwell\Phase 3\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32_USB-FS-Device_Driver\inc\"
#        -I "C:\Users\Ryan\Documents\school\uou\Cadwell\Phase 3\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32L1xx_StdPeriph_Driver\inc\"
#        -I "C:\Users\Ryan\Documents\school\uou\Cadwell\Phase 3\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\platform\STM32L1XX\Libraries\I2C\inc\"
#        -I "C:\Users\Ryan\Documents\school\uou\Cadwell\Phase 3\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\platform\STM32L1XX\Libraries\LIS3DH\inc\"
#        -I "C:\Users\Ryan\Documents\school\uou\Cadwell\Phase 3\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\platform\STM32L1XX\Libraries\STLM75\inc\"
#        -I "C:\Users\Ryan\Documents\school\uou\Cadwell\Phase 3\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\platform\STM32L1XX\Libraries\HTS221\inc\"
#        -I "C:\Users\Ryan\Documents\school\uou\Cadwell\Phase 3\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\platform\STM32L1XX\Libraries\LPS25H\inc\"
#        -I "C:\Users\Ryan\Documents\school\uou\Cadwell\Phase 3\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\platform\STM32L1XX\Libraries\SDK_Eval_STM32L\inc\"
#        -Ohs --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\Users\Ryan\Documents\school\uou\Cadwell\Phase 3\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\Server\List\timer.lst
#    Object file  =  
#        C:\Users\Ryan\Documents\school\uou\Cadwell\Phase 3\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\Server\Obj\timer.o
#
###############################################################################

C:\Users\Ryan\Documents\school\uou\Cadwell\Phase 3\trunk\Projects V2\Project\BLE_Chat_Server\src\timer.c
      1          #include "timer.h"
      2          #include "stm32l1xx.h"
      3          #include "stm32l1xx_gpio.h"
      4          #include "led.h"
      5          #include "push_button.h"
      6          
      7          /**
      8            * @brief  Configures and initializes a timer
      9            * @param  maxCount - maximum timer count in miliseconds
     10            * @param  timx - the counter number (2,4,5,6, or 7)
     11            * @retval None
     12            */
     13          void initTimer(int timx,int maxCount)
     14          {
     15            TIM_TypeDef* timer;
     16            switch(timx)
     17            {
     18              case(2):
     19                RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
     20                timer = TIM2;
     21                break;
     22              case(4):
     23                RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
     24                timer = TIM4;
     25                break;
     26              case(5):
     27                RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
     28                timer = TIM5;
     29                break;
     30              case(6):
     31                RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
     32                timer = TIM6;
     33                break;
     34              case(7):
     35                RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
     36                timer = TIM7;
     37                break;
     38            }
     39          
     40              TIM_TimeBaseInitTypeDef timerInitStructure; 
     41              timerInitStructure.TIM_Prescaler = 40000;
     42              timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
     43              timerInitStructure.TIM_Period = maxCount;
     44              timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
     45              TIM_TimeBaseInit(timer, &timerInitStructure);
     46              TIM_ITConfig(timer, TIM_IT_Update, ENABLE);
     47          }
     48          
     49          
     50          /**
     51            * @brief  Starts a given a timer
     52            * @param  timx - the counter number (2,4,5,6, or 7)
     53            * @retval None
     54            */
     55          void startTimer(int timx)
     56          {
     57            switch(timx)
     58            {
     59              case(2):
     60                TIM2->CNT = 0;
     61                TIM_Cmd(TIM2, ENABLE);
     62                break;
     63              case(4):
     64                TIM4->CNT = 0;
     65                TIM_Cmd(TIM4, ENABLE);
     66                break;
     67              case(6):
     68                TIM6->CNT = 0;
     69                TIM_Cmd(TIM6, ENABLE);
     70                break;
     71              case(7):
     72                TIM7->CNT = 0;
     73                TIM_Cmd(TIM7, ENABLE);
     74                break;
     75            }
     76          }
     77          
     78          
     79          /**
     80            * @brief  Stops a given a timer
     81            * @param  timx - the counter number (2,4,5,6, or 7)
     82            * @retval None
     83            */
     84          void stopTimer(int timx)
     85          {
     86            switch(timx)
     87            {
     88              case(2):
     89                TIM_Cmd(TIM2, DISABLE);
     90                break;
     91              case(4):
     92                TIM_Cmd(TIM4, DISABLE);
     93                break;
     94              case(6):
     95                TIM_Cmd(TIM6, DISABLE);
     96                break;
     97              case(7):
     98                TIM_Cmd(TIM7, DISABLE);
     99                break;
    100            }
    101          }
    102          
    103          /**
    104            * @brief  Enables a timer interrupt
    105            * @param  None
    106            * @retval None
    107            */
    108          void enableTimerInterrupt(int timx)
    109          {
    110              NVIC_InitTypeDef nvicStructure;
    111              switch(timx)
    112            {
    113              case(2):
    114                nvicStructure.NVIC_IRQChannel = TIM2_IRQn;
    115                break;
    116              case(4):
    117                nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
    118                break;
    119              case(5):
    120                nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
    121                break;
    122              case(6):
    123                nvicStructure.NVIC_IRQChannel = TIM6_IRQn;
    124                break;
    125              case(7):
    126                nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
    127                break;
    128            }
    129              
    130              nvicStructure.NVIC_IRQChannelPreemptionPriority = 2;
    131              nvicStructure.NVIC_IRQChannelSubPriority = 1;
    132              nvicStructure.NVIC_IRQChannelCmd = ENABLE;
    133              NVIC_Init(&nvicStructure);
    134          }
    135          
    136          
    137          /**
    138            * @brief  Timer interrupt handler
    139            * @param  None
    140            * @retval None
    141            */
    142          void TIM2_IRQHandler()
    143          {
    144              if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
    145              {
    146                  TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
    147                  
    148              
    149                  stopTimer(2);
    150                  startTimer(4);
    151                  startTimer(6);
    152                  GPIO_ToggleBits(GPIOC,LED4);
    153              }
    154          }
    155          
    156          
    157          /**
    158            * @brief  Timer interrupt handler
    159            * @param  None
    160            * @retval None
    161            */
    162          void TIM4_IRQHandler()
    163          {
    164              if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)
    165              {
    166                  TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
    167                  
    168                  GPIO_ToggleBits(GPIOC, LED4);
    169              }
    170          }
    171          
    172          /**
    173            * @brief  Timer interrupt handler
    174            * @param  None
    175            * @retval None
    176            */
    177          void TIM5_IRQHandler()
    178          {
    179              if (TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET)
    180              {
    181                  TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
    182                  
    183                  GPIO_ToggleBits(GPIOD, LED2);
    184              }
    185          }
    186          
    187          /**
    188            * @brief  Timer interrupt handler
    189            * @param  None
    190            * @retval None
    191            */
    192          void TIM6_IRQHandler()
    193          {
    194              if (TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET)
    195              {
    196                  TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
    197                  
    198                  //Put code here
    199                  stopTimer(4);
    200                  stopTimer(6);
    201              }
    202          }
    203          
    204          /**
    205            * @brief  Timer interrupt handler
    206            * @param  None
    207            * @retval None
    208            */
    209          void TIM7_IRQHandler()
    210          {
    211              if (TIM_GetITStatus(TIM7, TIM_IT_Update) != RESET)
    212              {
    213                  TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
    214                  
    215                  stopTimer(7);
    216                  buttonOK = true;
    217              }
    218          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   TIM2_IRQHandler
         0   -> GPIO_ToggleBits
         8   -> TIM_ClearITPendingBit
         8   -> TIM_Cmd
         8   -> TIM_GetITStatus
       8   TIM4_IRQHandler
         0   -> GPIO_ToggleBits
         8   -> TIM_ClearITPendingBit
         8   -> TIM_GetITStatus
       8   TIM5_IRQHandler
         0   -> GPIO_ToggleBits
         8   -> TIM_ClearITPendingBit
         8   -> TIM_GetITStatus
       8   TIM6_IRQHandler
         8   -> TIM_ClearITPendingBit
         0   -> TIM_Cmd
         8   -> TIM_Cmd
         8   -> TIM_GetITStatus
       8   TIM7_IRQHandler
         8   -> TIM_ClearITPendingBit
         8   -> TIM_Cmd
         8   -> TIM_GetITStatus
       8   enableTimerInterrupt
         8   -> NVIC_Init
      24   initTimer
        24   -> RCC_APB1PeriphClockCmd
        24   -> TIM_ITConfig
        24   -> TIM_TimeBaseInit
       0   startTimer
         0   -> TIM_Cmd
       0   stopTimer
         0   -> TIM_Cmd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
      78  TIM2_IRQHandler
      36  TIM4_IRQHandler
      36  TIM5_IRQHandler
      44  TIM6_IRQHandler
      38  TIM7_IRQHandler
      68  enableTimerInterrupt
     140  initTimer
      54  startTimer
      46  stopTimer

 
 568 bytes in section .text
 
 568 bytes of CODE memory

Errors: none
Warnings: none
