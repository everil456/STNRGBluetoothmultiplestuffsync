###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        18/Mar/2015  15:38:43
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\platform\STM32L1XX\clock.c
#    Command line =  
#        "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\platform\STM32L1XX\clock.c" -D USE_STDPERIPH_DRIVER -D STM32L1XX_MD
#        -D SYSCLK_FREQ_HSI_32MHz -D ENABLE_USB -D ENABLE_USB_PRINTF -D
#        SERVER=1 -lcN "C:\School\2014 Fall\ECE 4900\Bluetooth
#        Code\SVN\trunk\Projects V2\Project\BLE_Chat_Server\EWARM\Server\List\"
#        --diag_suppress Pa050 -o "C:\School\2014 Fall\ECE 4900\Bluetooth
#        Code\SVN\trunk\Projects V2\Project\BLE_Chat_Server\EWARM\Server\Obj\"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I "C:\School\2014 Fall\ECE
#        4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\inc\" -I "C:\School\2014 Fall\ECE
#        4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\Bluetooth
#        LE\SimpleBlueNRG_HCI\" -I "C:\School\2014 Fall\ECE 4900\Bluetooth
#        Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\Bluetooth
#        LE\SimpleBlueNRG_HCI\includes\" -I "C:\School\2014 Fall\ECE
#        4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\platform\STM32L1XX\" -I
#        "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\platform\STM32L1XX\Libraries\"
#        -I "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\platform\STM32L1XX\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32L1xx\"
#        -I "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32_USB-FS-Device_Driver\inc\"
#        -I "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\platform\STM32L1XX\Libraries\STM32L1xx_StdPeriph_Driver\inc\"
#        -I "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\platform\STM32L1XX\Libraries\I2C\inc\"
#        -I "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\platform\STM32L1XX\Libraries\LIS3DH\inc\"
#        -I "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\platform\STM32L1XX\Libraries\STLM75\inc\"
#        -I "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\platform\STM32L1XX\Libraries\HTS221\inc\"
#        -I "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\platform\STM32L1XX\Libraries\LPS25H\inc\"
#        -I "C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\..\..\..\platform\STM32L1XX\Libraries\SDK_Eval_STM32L\inc\"
#        -Ohs --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\Server\List\clock.lst
#    Object file  =  
#        C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects
#        V2\Project\BLE_Chat_Server\EWARM\Server\Obj\clock.o
#
###############################################################################

C:\School\2014 Fall\ECE 4900\Bluetooth Code\SVN\trunk\Projects V2\platform\STM32L1XX\clock.c
      1          #include "clock.h"
      2          #include "hal.h"
      3          #include <stdio.h>
      4          
      5          /* Added define for clock settings */
      6          #include "SDK_EVAL_Clock.h"
      7          
      8          #include "stm32l1xx_systick.h"
      9          
     10          // The value that will be load in the SysTick value register.
     11          #define RELOAD_VALUE        (SYSCLK_FREQ/500000)-1   // One clock each 2 us
     12          #define RELOAD_VALUE_SLEEP  (SYSCLK_FREQ_SLEEP/1000)-1   // One clock each 1 ms
     13          
     14          void processInputData(uint8_t * rx_data, uint16_t data_size);
     15          
     16          volatile tClockTime count, countr, counter, synccount, eventr = 6500000; //defined in Main
     17          extern uint16_t syncReq;
     18          const uint32_t CLOCK_SECOND = 1000;
     19          
     20          /*---------------------------------------------------------------------------*/
     21          void SysTick_Handler(void)
     22          {
     23            countr++;
     24            counter++;
     25            synccount++;
     26            
     27            if(counter == 500)
     28            {
     29              counter = 0;
     30              count++;
     31            }
     32            if(synccount == 500000)
     33            {
     34              syncReq = 1; // this variable will trigger the sending of the time sync command.
     35          	synccount = 0; 
     36            }
     37            if((countr == eventr)&&(eventr != 0))
     38            {
     39              //startTimer(2); //turn on led for a second or something like that.
     40          	eventr = 0; //eventr will need to be something other than 0 for an event to take place
     41            }
     42          }
     43          /*---------------------------------------------------------------------------*/
     44          
     45          void Clock_Init(void)
     46          {
     47            ATOMIC_SECTION_BEGIN();
     48          
     49            SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
     50            SysTick_SetReload(RELOAD_VALUE);
     51            SysTick_CounterCmd(SysTick_Counter_Enable);
     52            SysTick_ITConfig(ENABLE);
     53          
     54            ATOMIC_SECTION_END();
     55          }
     56          
     57          void Clock_Suspend(void)
     58          {
     59            SysTick->CTRL = 0;
     60            SysTick_CounterCmd(SysTick_Counter_Clear);
     61          }
     62          
     63          void Clock_Resume(Clock_TypeDef ClockType)
     64          {
     65            uint32_t reload_value;
     66            
     67            if(ClockType == CLOCK_SLEEP){
     68              reload_value = RELOAD_VALUE_SLEEP;
     69            }
     70            else {
     71              reload_value = RELOAD_VALUE;
     72            }  
     73            
     74            SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
     75            SysTick_SetReload(reload_value);
     76            SysTick_CounterCmd(SysTick_Counter_Enable);
     77            SysTick_ITConfig(ENABLE);
     78          }
     79          
     80          /*---------------------------------------------------------------------------*/
     81          
     82          tClockTime Clock_Time(void)
     83          {
     84            return count;
     85            ////printf("inside Clock_Time\r\n");
     86          }
     87          /*---------------------------------------------------------------------------*/
     88          
     89          tClockTime Clock_Timeus(void)
     90          {
     91            return countr;
     92          }
     93          
     94          /*---------------------------------------------------------------------------*/
     95          /**
     96           * Wait for a multiple of 1 ms.
     97           *
     98           */
     99          void Clock_Wait(uint32_t i)
    100          {
    101            tClockTime start;
    102          
    103            start = Clock_Time();
    104            while(Clock_Time() - start < (tClockTime)(i));
    105           }
    106          /*---------------------------------------------------------------------------*/
    107          /**
    108           * Wait for a multiple of 1 us.
    109           *
    110           */
    111          void Clock_Waitus(uint32_t i)
    112          {
    113            tClockTime startus;
    114          
    115            startus = Clock_Timeus();
    116            while(Clock_Timeus() - startus < (tClockTime)(i));
    117          }
    118          /*---------------------------------------------------------------------------*/
    119          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Clock_Init
         8   -> SysTick_CLKSourceConfig
         8   -> SysTick_CounterCmd
         8   -> SysTick_ITConfig
         8   -> SysTick_SetReload
       8   Clock_Resume
         8   -> SysTick_CLKSourceConfig
         8   -> SysTick_CounterCmd
         0   -> SysTick_ITConfig
         8   -> SysTick_SetReload
       0   Clock_Suspend
         0   -> SysTick_CounterCmd
       0   Clock_Time
       0   Clock_Timeus
       0   Clock_Wait
       0   Clock_Waitus
       0   SysTick_Handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  CLOCK_SECOND
      38  Clock_Init
      38  Clock_Resume
      10  Clock_Suspend
       6  Clock_Time
       6  Clock_Timeus
      14  Clock_Wait
      14  Clock_Waitus
      74  SysTick_Handler
      20  count
          countr
          counter
          synccount
          eventr

 
  20 bytes in section .data
   4 bytes in section .rodata
 216 bytes in section .text
 
 216 bytes of CODE  memory
   4 bytes of CONST memory
  20 bytes of DATA  memory

Errors: none
Warnings: 1
